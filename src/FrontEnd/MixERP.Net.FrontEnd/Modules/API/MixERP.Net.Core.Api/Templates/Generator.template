using MixERP.Net.Entities;
using PetaPoco;
using System.Collections.Generic;
using System.Net;
using System.Web.Http;

// ReSharper Disable All 
namespace <#=Namespace #>
{
<#
foreach(Table tbl in from t in tables where !t.Ignore select t)
{
#>
    /// <summary>
    /// A CRUD API for <#=tbl.Name.Replace("_", "-") #>. 
    /// This class cannot be inherited.
    /// </summary>
    public sealed class <#=tbl.ClassName#>Controller: MixERPApiController
    {
        [HttpGet]
        [Route("api/<#=tbl.Schema.Replace("_", "-") #>/<#=tbl.Name.Replace("_", "-") #>")]
        [Route("api/<#=tbl.Schema.Replace("_", "-") #>/<#=tbl.Name.Replace("_", "-") #>/page/{page:long}")]
        public IEnumerable<<#=EntityNamespace#>.<#=tbl.ClassName#>> GetPagedResult(long page=1)
        {
            ApiAccessPolicy policy = new ApiAccessPolicy(typeof(<#=EntityNamespace#>.<#=tbl.ClassName#>), new HttpGetAttribute());
            policy.Authorize();

            if (!policy.IsAuthorized)
            {
                throw new HttpResponseException(HttpStatusCode.Forbidden);
            }

            try
            {
                using (Database db = new Database(Factory.GetConnectionString(), "Npgsql"))
                {
                    return db.Page<<#=EntityNamespace#>.<#=tbl.ClassName#>>(page, 10, "SELECT * FROM <#=tbl.Schema#>.<#=tbl.Name#> ORDER BY <#=tbl.PrimaryKey#>").Items;
                }
            }
            catch
            {
                throw new HttpResponseException(HttpStatusCode.InternalServerError);
            }
        }

        [HttpGet]
        [Route("api/<#=tbl.Schema.Replace("_", "-") #>/<#=tbl.Name.Replace("_", "-") #>/{id}")]
        public <#=EntityNamespace#>.<#=tbl.ClassName#> GetSingle(<#=tbl.PrimaryKeyType#> id)
        {
            ApiAccessPolicy policy = new ApiAccessPolicy(typeof(<#=EntityNamespace#>.<#=tbl.ClassName#>), new HttpGetAttribute());
            policy.Authorize();

            if (!policy.IsAuthorized)
            {
                throw new HttpResponseException(HttpStatusCode.Forbidden);
            }

            try
            {
                using (Database db = new Database(Factory.GetConnectionString(), "Npgsql"))
                {
                    return db.FirstOrDefault<<#=EntityNamespace#>.<#=tbl.ClassName#>>("SELECT * FROM <#=tbl.Schema#>.<#=tbl.Name#> WHERE <#=tbl.PrimaryKey#>=@0", id);
                }
            }
            catch
            {
                throw new HttpResponseException(HttpStatusCode.InternalServerError);
            }
        }
        
        [HttpPost]
        [Route("api/<#=tbl.Schema.Replace("_", "-") #>/<#=tbl.Name.Replace("_", "-") #>/post/{item}")]
        public bool Post(<#=EntityNamespace#>.<#=tbl.ClassName#> item)
        {
            if (item == null)
            {
                throw new HttpResponseException(HttpStatusCode.BadRequest);
            }

            ApiAccessPolicy policy = new ApiAccessPolicy(typeof(<#=EntityNamespace#>.<#=tbl.ClassName#>), new HttpGetAttribute());
            policy.Authorize();

            if (!policy.IsAuthorized)
            {
                throw new HttpResponseException(HttpStatusCode.Forbidden);
            }

            try
            {
                using (Database db = new Database(Factory.GetConnectionString(), "Npgsql"))
                {
                    db.Insert(item);
                }
            }
            catch
            {
                throw new HttpResponseException(HttpStatusCode.InternalServerError);
            }

            return true;
        }

        [HttpPut]
        [Route("api/<#=tbl.Schema.Replace("_", "-") #>/<#=tbl.Name.Replace("_", "-") #>/put/{id}")]
        public void Put(<#=tbl.PrimaryKeyType#> id, <#=EntityNamespace#>.<#=tbl.ClassName#> item)
        {
            <#
            if(tbl.PrimaryKeyType.Equals("string"))
            {
            #>
            if (item == null || string.IsNullOrWhiteSpace(id))
            {
                throw new HttpResponseException(HttpStatusCode.BadRequest);
            }
            <#
            }
            else
            {#>if (item == null || id <= 0)
            {
                throw new HttpResponseException(HttpStatusCode.BadRequest);
            }
            <#
            }
            #>
            
            ApiAccessPolicy policy = new ApiAccessPolicy(typeof(<#=EntityNamespace#>.<#=tbl.ClassName#>), new HttpGetAttribute());
            policy.Authorize();

            if (!policy.IsAuthorized)
            {
                throw new HttpResponseException(HttpStatusCode.Forbidden);
            }

            try
            {
                using (Database db = new Database(Factory.GetConnectionString(), "Npgsql"))
                {
                    db.Update("<#=tbl.Schema#>.<#=tbl.Name#>", "<#=tbl.PrimaryKey#>", item);
                }
            }
            catch
            {
                throw new HttpResponseException(HttpStatusCode.InternalServerError);
            }
        }

        [HttpDelete]
        [Route("api/<#=tbl.Schema.Replace("_", "-") #>/<#=tbl.Name.Replace("_", "-") #>/delete/{id}")]
        public void Delete(<#=tbl.PrimaryKeyType#> id)
        {
            <#
            if(tbl.PrimaryKeyType.Equals("string"))
            {
            #>
            if (string.IsNullOrWhiteSpace(id))
            {
                return;
            }
            <#
            }
            else
            {#>if (id <= 0)
            {
                return;
            }
            <#
            }
            #>

            ApiAccessPolicy policy = new ApiAccessPolicy(typeof(<#=EntityNamespace#>.<#=tbl.ClassName#>), new HttpGetAttribute());
            policy.Authorize();

            if (!policy.IsAuthorized)
            {
                throw new HttpResponseException(HttpStatusCode.Forbidden);
            }

            try
            {
                using (Database db = new Database(Factory.GetConnectionString(), "Npgsql"))
                {
                    db.Delete("<#=tbl.Schema#>.<#=tbl.Name#>", "<#=tbl.PrimaryKey#>", null, id);
                }
            }
            catch
            {
                throw new HttpResponseException(HttpStatusCode.InternalServerError);
            }
        }
        //End of <#=tbl.ClassName#>Controller Class        
    }

    
<# } #>
}
